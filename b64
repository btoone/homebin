#!/usr/bin/env ruby

# === Lib

# when declaring eveything in a single file, order matters. The class has to
# come before the runner.
class BaseSixtyFour
  require 'base64'
  
  def greeting; "hello"; end

  def encode(str)
    Base64.encode64(str)
  end

  def decode(str)
    Base64.decode64(str)
  end
end

# === Specs

# TODO: Fill out specs
# TODO: Figure out how to test the command line UI

# require 'minitest/autorun'                                                    # uncomment to run tests when executing this script
require 'minitest/spec'

describe BaseSixtyFour do
  before do
    @b64 = BaseSixtyFour.new
  end

  it "can run tests" do
    @b64.greeting.must_equal "fail"
  end

  it "encodes the first arg"
  it "calls base64 encode when arg is -e"
  it "calls base64 decode when arg is -d"
  it "plays well with others by accepting stdin"
end

# === Options

require 'optparse'

# maybe options should be handled by a runner script declared outside this class
executable_name = File.basename($PROGRAM_NAME)

options = {}
option_parser = OptionParser.new do |opts|
  opts.banner = <<-EOS
Encodes or decodes (-d) an input string using Ruby's Base64

Usage: #{executable_name} [options] string

  EOS

  opts.version = "0.1"
  opts.on("-e", "--encode", "Encode the input string. Surround input in quotes if encoding multiple words") do
    options[:encode] = true
  end
  opts.on("-d", "--decode", "Decode the input string") do
    options[:decode] = true
  end
end

begin
  option_parser.parse!
  if ARGV.empty?
    puts "Error: #{executable_name} requires a string to encode or decode"
    puts
    puts option_parser.help
    exit 2
  end
rescue OptionParser::InvalidOption => ex
  STDERR.puts ex.message
  STDERR.puts option_parser
  exit 3
end

# === Runner

def run(options)
  b64 = BaseSixtyFour.new

  # puts options
  # puts b64.greeting if options[:encode]
 
  if options[:decode]
    puts b64.decode(ARGV[0])
    exit 0
  else
    puts b64.encode(ARGV[0])
    exit 0
  end
end

# have the runner call the run() method
run(options)

